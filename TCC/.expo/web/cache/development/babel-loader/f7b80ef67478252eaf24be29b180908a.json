{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nimport React from \"react\";\nimport PanResponder from \"react-native-web/dist/exports/PanResponder\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport Easing from \"react-native-web/dist/exports/Easing\";\nimport StarIcon from \"./StarIcon\";\nimport { getStars } from \"./utils\";\nvar defaultColor = \"#fdd835\";\nvar defaultAnimationConfig = {\n  easing: Easing.elastic(2),\n  duration: 300,\n  scale: 1.2,\n  delay: 300\n};\nvar StarRating = function StarRating(_ref) {\n  var rating = _ref.rating,\n    _ref$maxStars = _ref.maxStars,\n    maxStars = _ref$maxStars === void 0 ? 5 : _ref$maxStars,\n    _ref$starSize = _ref.starSize,\n    starSize = _ref$starSize === void 0 ? 32 : _ref$starSize,\n    onChange = _ref.onChange,\n    _ref$color = _ref.color,\n    color = _ref$color === void 0 ? defaultColor : _ref$color,\n    _ref$emptyColor = _ref.emptyColor,\n    emptyColor = _ref$emptyColor === void 0 ? color : _ref$emptyColor,\n    _ref$enableHalfStar = _ref.enableHalfStar,\n    enableHalfStar = _ref$enableHalfStar === void 0 ? true : _ref$enableHalfStar,\n    _ref$enableSwiping = _ref.enableSwiping,\n    enableSwiping = _ref$enableSwiping === void 0 ? true : _ref$enableSwiping,\n    onRatingStart = _ref.onRatingStart,\n    onRatingEnd = _ref.onRatingEnd,\n    _ref$animationConfig = _ref.animationConfig,\n    animationConfig = _ref$animationConfig === void 0 ? defaultAnimationConfig : _ref$animationConfig,\n    style = _ref.style,\n    starStyle = _ref.starStyle,\n    testID = _ref.testID;\n  var width = React.useRef();\n  var ref = React.useRef(null);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    isInteracting = _React$useState2[0],\n    setInteracting = _React$useState2[1];\n  var handleInteraction = React.useCallback(function (x) {\n    if (width.current) {\n      var newRating = Math.max(0, Math.min(Math.round(x / width.current * maxStars * 2 + 0.2) / 2, maxStars));\n      if (newRating !== rating) {\n        onChange(enableHalfStar ? newRating : Math.ceil(newRating));\n      }\n    }\n  }, [enableHalfStar, maxStars, onChange, rating]);\n  var panResponder = React.useMemo(function () {\n    return PanResponder.create({\n      onStartShouldSetPanResponder: function onStartShouldSetPanResponder() {\n        return true;\n      },\n      onStartShouldSetPanResponderCapture: function onStartShouldSetPanResponderCapture() {\n        return true;\n      },\n      onMoveShouldSetPanResponder: function onMoveShouldSetPanResponder() {\n        return true;\n      },\n      onMoveShouldSetPanResponderCapture: function onMoveShouldSetPanResponderCapture() {\n        return true;\n      },\n      onPanResponderMove: function onPanResponderMove(e) {\n        if (enableSwiping) {\n          handleInteraction(e.nativeEvent.locationX);\n        }\n      },\n      onPanResponderStart: function onPanResponderStart(e) {\n        onRatingStart === null || onRatingStart === void 0 ? void 0 : onRatingStart();\n        handleInteraction(e.nativeEvent.locationX);\n        setInteracting(true);\n      },\n      onPanResponderEnd: function onPanResponderEnd() {\n        onRatingEnd === null || onRatingEnd === void 0 ? void 0 : onRatingEnd();\n        setTimeout(function () {\n          setInteracting(false);\n        }, animationConfig.delay || defaultAnimationConfig.delay);\n      }\n    });\n  }, [animationConfig.delay, enableSwiping, handleInteraction, onRatingStart, onRatingEnd]);\n  return React.createElement(View, _extends({\n    ref: ref,\n    style: [styles.starRating, style]\n  }, panResponder.panHandlers, {\n    onLayout: function onLayout() {\n      if (ref.current) {\n        ref.current.measure(function (_x, _y, w, _h) {\n          return width.current = w;\n        });\n      }\n    },\n    testID: testID\n  }), getStars(rating, maxStars).map(function (starType, i) {\n    return React.createElement(AnimatedIcon, {\n      key: i,\n      active: isInteracting && rating - i >= 0.5,\n      animationConfig: animationConfig,\n      style: starStyle\n    }, React.createElement(StarIcon, {\n      type: starType,\n      size: starSize,\n      color: starType === \"empty\" ? emptyColor : color\n    }));\n  }));\n};\nvar AnimatedIcon = function AnimatedIcon(_ref2) {\n  var active = _ref2.active,\n    animationConfig = _ref2.animationConfig,\n    children = _ref2.children,\n    style = _ref2.style;\n  var _animationConfig$scal = animationConfig.scale,\n    scale = _animationConfig$scal === void 0 ? defaultAnimationConfig.scale : _animationConfig$scal,\n    _animationConfig$easi = animationConfig.easing,\n    easing = _animationConfig$easi === void 0 ? defaultAnimationConfig.easing : _animationConfig$easi,\n    _animationConfig$dura = animationConfig.duration,\n    duration = _animationConfig$dura === void 0 ? defaultAnimationConfig.duration : _animationConfig$dura;\n  var animatedSize = React.useRef(new Animated.Value(active ? scale : 1));\n  React.useEffect(function () {\n    var animation = Animated.timing(animatedSize.current, {\n      toValue: active ? scale : 1,\n      useNativeDriver: true,\n      easing: easing,\n      duration: duration\n    });\n    animation.start();\n    return animation.stop;\n  }, [active, scale, easing, duration]);\n  return React.createElement(Animated.View, {\n    pointerEvents: \"none\",\n    style: [styles.star, style, {\n      transform: [{\n        scale: animatedSize.current\n      }]\n    }]\n  }, children);\n};\nvar styles = StyleSheet.create({\n  starRating: {\n    flexDirection: \"row\",\n    alignSelf: \"flex-start\"\n  },\n  star: {\n    marginHorizontal: 5\n  }\n});\nexport default StarRating;","map":{"version":3,"mappings":"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","names":["React","StarIcon","getStars","defaultColor","defaultAnimationConfig","easing","Easing","elastic","duration","scale","delay","StarRating","rating","maxStars","starSize","onChange","color","emptyColor","enableHalfStar","enableSwiping","onRatingStart","onRatingEnd","animationConfig","style","starStyle","testID","width","useRef","ref","useState","isInteracting","setInteracting","handleInteraction","useCallback","x","current","newRating","Math","max","min","round","ceil","panResponder","useMemo","PanResponder","create","onStartShouldSetPanResponder","onStartShouldSetPanResponderCapture","onMoveShouldSetPanResponder","onMoveShouldSetPanResponderCapture","onPanResponderMove","e","nativeEvent","locationX","onPanResponderStart","onPanResponderEnd","setTimeout","View","styles","starRating","panHandlers","onLayout","measure","_x","_y","w","_h","map","starType","i","AnimatedIcon","key","active","type","size","children","animatedSize","Animated","Value","useEffect","animation","timing","toValue","useNativeDriver","start","stop","pointerEvents","star","transform","StyleSheet","flexDirection","alignSelf","marginHorizontal"],"sources":["StarRating.tsx"],"sourcesContent":["import React from \"react\";\nimport {\n    PanResponder,\n    StyleSheet,\n    View,\n    StyleProp,\n    ViewStyle,\n    Animated,\n    Easing,\n} from \"react-native\";\nimport StarIcon from \"./StarIcon\";\nimport { getStars } from \"./utils\";\n\ntype AnimationConfig = {\n    easing?: (value: number) => number;\n    duration?: number;\n    delay?: number;\n    scale?: number;\n};\n\ntype StarRatingProps = {\n    rating: number;\n    onChange: (rating: number) => void;\n    minRating?: number;\n    color?: string;\n    emptyColor?: string;\n    maxStars?: number;\n    starSize?: number;\n    enableHalfStar?: boolean;\n    enableSwiping?: boolean;\n    onRatingStart?: () => void;\n    onRatingEnd?: () => void;\n    style?: StyleProp<ViewStyle>;\n    starStyle?: StyleProp<ViewStyle>;\n    animationConfig?: AnimationConfig;\n    testID?: string;\n};\n\nconst defaultColor = \"#fdd835\";\nconst defaultAnimationConfig: Required<AnimationConfig> = {\n    easing: Easing.elastic(2),\n    duration: 300,\n    scale: 1.2,\n    delay: 300,\n};\n\nconst StarRating: React.FC<StarRatingProps> = ({\n    rating,\n    maxStars = 5,\n    starSize = 32,\n    onChange,\n    color = defaultColor,\n    emptyColor = color,\n    enableHalfStar = true,\n    enableSwiping = true,\n    onRatingStart,\n    onRatingEnd,\n    animationConfig = defaultAnimationConfig,\n    style,\n    starStyle,\n    testID,\n}) => {\n    const width = React.useRef<number>();\n    const ref = React.useRef<View>(null);\n    const [isInteracting, setInteracting] = React.useState(false);\n\n    const handleInteraction = React.useCallback(\n        (x: number) => {\n            if (width.current) {\n                const newRating = Math.max(\n                    0,\n                    Math.min(\n                        Math.round((x / width.current) * maxStars * 2 + 0.2) /\n                            2,\n                        maxStars\n                    )\n                );\n                if (newRating !== rating) {\n                    onChange(enableHalfStar ? newRating : Math.ceil(newRating));\n                }\n            }\n        },\n        [enableHalfStar, maxStars, onChange, rating]\n    );\n\n    const panResponder = React.useMemo(() => {\n        return PanResponder.create({\n            onStartShouldSetPanResponder: () => true,\n            onStartShouldSetPanResponderCapture: () => true,\n            onMoveShouldSetPanResponder: () => true,\n            onMoveShouldSetPanResponderCapture: () => true,\n            onPanResponderMove: e => {\n                if (enableSwiping) {\n                    handleInteraction(e.nativeEvent.locationX);\n                }\n            },\n            onPanResponderStart: e => {\n                onRatingStart?.();\n                handleInteraction(e.nativeEvent.locationX);\n                setInteracting(true);\n            },\n            onPanResponderEnd: () => {\n                onRatingEnd?.();\n                setTimeout(() => {\n                    setInteracting(false);\n                }, animationConfig.delay || defaultAnimationConfig.delay);\n            },\n        });\n    }, [\n        animationConfig.delay,\n        enableSwiping,\n        handleInteraction,\n        onRatingStart,\n        onRatingEnd,\n    ]);\n\n    return (\n        <View\n            ref={ref}\n            style={[styles.starRating, style]}\n            {...panResponder.panHandlers}\n            onLayout={() => {\n                if (ref.current) {\n                    ref.current.measure((_x, _y, w, _h) => (width.current = w));\n                }\n            }}\n            testID={testID}>\n            {getStars(rating, maxStars).map((starType, i) => {\n                return (\n                    <AnimatedIcon\n                        key={i}\n                        active={isInteracting && rating - i >= 0.5}\n                        animationConfig={animationConfig}\n                        style={starStyle}>\n                        <StarIcon\n                            type={starType}\n                            size={starSize}\n                            color={starType === \"empty\" ? emptyColor : color}\n                        />\n                    </AnimatedIcon>\n                );\n            })}\n        </View>\n    );\n};\n\ntype AnimatedIconProps = {\n    active: boolean;\n    children: React.ReactElement;\n    animationConfig: AnimationConfig;\n    style?: StyleProp<ViewStyle>;\n};\n\nconst AnimatedIcon: React.FC<AnimatedIconProps> = ({\n    active,\n    animationConfig,\n    children,\n    style,\n}) => {\n    const {\n        scale = defaultAnimationConfig.scale,\n        easing = defaultAnimationConfig.easing,\n        duration = defaultAnimationConfig.duration,\n    } = animationConfig;\n\n    const animatedSize = React.useRef(new Animated.Value(active ? scale : 1));\n\n    React.useEffect(() => {\n        const animation = Animated.timing(animatedSize.current, {\n            toValue: active ? scale : 1,\n            useNativeDriver: true,\n            easing,\n            duration,\n        });\n\n        animation.start();\n        return animation.stop;\n    }, [active, scale, easing, duration]);\n\n    return (\n        <Animated.View\n            pointerEvents=\"none\"\n            style={[\n                styles.star,\n                style,\n                {\n                    transform: [\n                        {\n                            scale: animatedSize.current,\n                        },\n                    ],\n                },\n            ]}>\n            {children}\n        </Animated.View>\n    );\n};\n\nconst styles = StyleSheet.create({\n    starRating: {\n        flexDirection: \"row\",\n        alignSelf: \"flex-start\",\n    },\n    star: {\n        marginHorizontal: 5,\n    },\n});\n\nexport default StarRating;\n"]},"metadata":{},"sourceType":"module"}